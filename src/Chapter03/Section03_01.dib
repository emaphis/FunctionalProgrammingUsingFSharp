#!meta

{"kernelInfo":{"defaultKernelName":"fsharp","items":[{"aliases":[],"languageName":"fsharp","name":"fsharp"}]}}

#!markdown

# Chapter 3 - Tuples, records and tagged values

#!markdown

## 3.1 Tuples

An ordered collection of $n$ values $(v_1,v_2, ... , v_n)$, where $n > 1$, is called an $n-tuple$.

Examples of $n-tuples$ are:

#!fsharp

let tpl1 = (10, true)
// val tpl1: int * bool = (10, true)

let tpl2 = (("abc", 1), -3)
// val tpl2: (string * int) * int = (("abc", 1), -3)

printfn "%A" tpl1
printfn "%A" tpl2

#!markdown

A $2-tuple$ is a called a pair. The second example is a pair contains another pair.

A 3-tuple is called a triple and a 4-tuple is calle a quadruple. There ae no 1-tuples or 0-tuples. An expression like $(true)$ is not a tuple but just the expression $true$ enclosed by parentheses. 

The symbol $()$ is the only value of `unit`.

#!markdown

## Tuple expressions

A tuple expression $(expr_1, expr_2, ..., expr_n) is formed ny enclsing $n$ expressions $expr_1, expre_2, ..., expr_n in parentheses.  It has the type $\tau_1 * \tau_2 * ... \tau_n$ when $expr_1, expr_2, ..., expr_n$ have the types $\tau_1 * \tau_2 * ... \tau_n$.

For example:

#!fsharp

let tpl3 =(1<2,"abc",1,1-4);;
// val tpl3: bool * string * int * int = (true, "abc", 1, -3)

let tpl4 = (true,"abc");;
// val tpl4: bool * string = (true, "abc")

let tpl5 = ((2>1,"abc"),3-2,-3);;
// val tpl5: (bool * string) * int * int = ((true, "abc"), 1, -3)
